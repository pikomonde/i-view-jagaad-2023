// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	model "i-view-jagaad-2023/model"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// FetchUsersFromProviders provides a mock function with given fields:
func (_m *UserService) FetchUsersFromProviders() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_FetchUsersFromProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUsersFromProviders'
type UserService_FetchUsersFromProviders_Call struct {
	*mock.Call
}

// FetchUsersFromProviders is a helper method to define mock.On call
func (_e *UserService_Expecter) FetchUsersFromProviders() *UserService_FetchUsersFromProviders_Call {
	return &UserService_FetchUsersFromProviders_Call{Call: _e.mock.On("FetchUsersFromProviders")}
}

func (_c *UserService_FetchUsersFromProviders_Call) Run(run func()) *UserService_FetchUsersFromProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserService_FetchUsersFromProviders_Call) Return(_a0 error) *UserService_FetchUsersFromProviders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_FetchUsersFromProviders_Call) RunAndReturn(run func() error) *UserService_FetchUsersFromProviders_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByTags provides a mock function with given fields: tags
func (_m *UserService) GetUserByTags(tags []string) ([]model.User, error) {
	ret := _m.Called(tags)

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]model.User, error)); ok {
		return rf(tags)
	}
	if rf, ok := ret.Get(0).(func([]string) []model.User); ok {
		r0 = rf(tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByTags'
type UserService_GetUserByTags_Call struct {
	*mock.Call
}

// GetUserByTags is a helper method to define mock.On call
//   - tags []string
func (_e *UserService_Expecter) GetUserByTags(tags interface{}) *UserService_GetUserByTags_Call {
	return &UserService_GetUserByTags_Call{Call: _e.mock.On("GetUserByTags", tags)}
}

func (_c *UserService_GetUserByTags_Call) Run(run func(tags []string)) *UserService_GetUserByTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *UserService_GetUserByTags_Call) Return(_a0 []model.User, _a1 error) *UserService_GetUserByTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByTags_Call) RunAndReturn(run func([]string) ([]model.User, error)) *UserService_GetUserByTags_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
