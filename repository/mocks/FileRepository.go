// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	model "i-view-jagaad-2023/model"

	mock "github.com/stretchr/testify/mock"
)

// FileRepository is an autogenerated mock type for the FileRepository type
type FileRepository struct {
	mock.Mock
}

type FileRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FileRepository) EXPECT() *FileRepository_Expecter {
	return &FileRepository_Expecter{mock: &_m.Mock}
}

// GetUsers provides a mock function with given fields:
func (_m *FileRepository) GetUsers() ([]model.User, error) {
	ret := _m.Called()

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type FileRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
func (_e *FileRepository_Expecter) GetUsers() *FileRepository_GetUsers_Call {
	return &FileRepository_GetUsers_Call{Call: _e.mock.On("GetUsers")}
}

func (_c *FileRepository_GetUsers_Call) Run(run func()) *FileRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileRepository_GetUsers_Call) Return(_a0 []model.User, _a1 error) *FileRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileRepository_GetUsers_Call) RunAndReturn(run func() ([]model.User, error)) *FileRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUsers provides a mock function with given fields: users
func (_m *FileRepository) SaveUsers(users []model.User) error {
	ret := _m.Called(users)

	var r0 error
	if rf, ok := ret.Get(0).(func([]model.User) error); ok {
		r0 = rf(users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileRepository_SaveUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUsers'
type FileRepository_SaveUsers_Call struct {
	*mock.Call
}

// SaveUsers is a helper method to define mock.On call
//   - users []model.User
func (_e *FileRepository_Expecter) SaveUsers(users interface{}) *FileRepository_SaveUsers_Call {
	return &FileRepository_SaveUsers_Call{Call: _e.mock.On("SaveUsers", users)}
}

func (_c *FileRepository_SaveUsers_Call) Run(run func(users []model.User)) *FileRepository_SaveUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.User))
	})
	return _c
}

func (_c *FileRepository_SaveUsers_Call) Return(_a0 error) *FileRepository_SaveUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileRepository_SaveUsers_Call) RunAndReturn(run func([]model.User) error) *FileRepository_SaveUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileRepository creates a new instance of FileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileRepository {
	mock := &FileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
